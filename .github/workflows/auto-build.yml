name: Automatic check update and Build
on:
  # # Uncomment it to make this workflow automatic
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:

  check:
    runs-on: ubuntu-latest
    outputs:
      match: ${{ steps.check-tags.outputs.match }}
      tag: ${{ steps.target-tag.outputs.tag }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Get last tag 
      id: target-tag
      run: |
        tag=$(curl -s https://api.github.com/repos/aseprite/aseprite/tags | jq -r '.[0].name')
        # echo "::set-output name=tag::$tag"
        echo "tag=$(echo $tag)" >> $GITHUB_OUTPUT
    - name: Get the last tag of this repository
      id: current-tag
      run: |
        tag=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }} " -s https://api.github.com/repos/${{ github.repository }}/tags | jq -r '.[0].name')
        echo "tag=$(echo $tag)" >> $GITHUB_OUTPUT
    - name: Compare tags
      id: check-tags
      run: |
        if [ "${{ steps.target-tag.outputs.tag }}" == "${{ steps.current-tag.outputs.tag }}" ] ; then
          echo "Tags match, skipping downstream job"
          echo "match=false" >> $GITHUB_OUTPUT
        else
          echo "Tags do not match, running downstream job"
          echo "match=true" >> $GITHUB_OUTPUT
        fi
    - name: Build or not?
      run: |
        echo ${{ steps.check-tags.outputs.match }}

  build:
    needs: check
    if: needs.check.outputs.match == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]
        enable_ui: [on]
        include:
          - os: windows-latest
            build_type: Release
            enable_ui: on

    steps:

    - name: Get the Body and repository name of the Release
      id: get-content
      shell: bash
      run: |
        body=$(curl -s https://api.github.com/repos/aseprite/aseprite/releases/tags/${{ needs.check.outputs.tag }} | jq -r '.body')
        echo "body-content=$(echo $body)" >> $GITHUB_OUTPUT 
        echo $body
        GITHUB_REPOSITORY="${{ github.repository }}"
        REPO_NAME="${GITHUB_REPOSITORY#${{ github.repository_owner }}/}"
        echo "repo-name=$(echo $REPO_NAME)" >> $GITHUB_OUTPUT 
        echo $REPO_NAME

    - uses: actions/checkout@v3
      with:
        repository: 'aseprite/aseprite'
        submodules: 'recursive'
        ref: ${{ needs.check.outputs.tag }}

    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: ilammy/msvc-dev-cmd@v1

    - name: List directory contents
      run: Get-ChildItem -Force | Select-Object Mode, LastWriteTime, Length, Name

    - name: Check CMake
      run: |
        cmake --version
        which cmake

    # "Skia-m124 (don't use)" is required for icudtl.dat and more
    - name: Set up Skia directory
      run: |
        curl -L -o skia.zip https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Windows-Release-x64.zip
        7z x skia.zip -oskia
    
    - name: Verify icudtl.dat file
      run: |
        $SKIA_DIR = "${PWD}/skia"
        $SKIA_ICUDATA_FILE = "${SKIA_DIR}/third_party/externals/icu/flutter/icudtl.dat"
        
        if (Test-Path $SKIA_ICUDATA_FILE) {
          Write-Output "icudtl.dat file found in Skia directory"
        } else {
          Write-Error "icudtl.dat file not found in Skia directory"
          exit 1
        }
    
        # Optionally, copy to build directory if needed
        # $BUILD_DIR = "${PWD}/build"
        # New-Item -ItemType Directory -Force -Path $BUILD_DIR
        # Copy-Item -Path $SKIA_ICUDATA_FILE -Destination "${BUILD_DIR}/icudtl.dat" -Force
    
    - name: Set environment variables
      run: |
        if ("${{ runner.os }}" -eq "Windows") {
          echo "enable_ccache=off" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        } else {
          echo "enable_ccache=on" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        }
        echo "enable_ui=on" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    
    - name: Generate Makefile
      shell: pwsh
      run: |
        $cmakeArgs = @(
          "-S", ".",
          "-B", "build",
          "-G", "Ninja",
          "-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}",
          "-DENABLE_UI=${{ env.enable_ui }}",
          "-DENABLE_CCACHE=${{ env.enable_ccache }}",
          "-DLAF_BACKEND=skia",
          "-DSKIA_DIR=${PWD}/skia",
          "-DSKIA_LIBRARY_DIR=${PWD}/skia/out/Release-x64",
          "-DSKIA_LIBRARY=${PWD}/skia/out/Release-x64/skia.lib"
        )
        & cmake $cmakeArgs
      
    - name: compiling
      shell: bash
      run: |
        cd build && ninja
    
    - name: Fetch "libcrypto-1_1-x64.dll"
      shell: bash 
      run: |
        GITHUB_REPOSITORY="${{ github.repository }}"
        REPO_NAME="${GITHUB_REPOSITORY#${{ github.repository_owner }}/}"

        curl -L -o D:/a/$REPO_NAME/$REPO_NAME/build/bin/libcrypto-1_1-x64.dll https://github.com/feenkcom/libopenssl/releases/download/v0.5.0/crypto-x86_64-pc-windows-msvc.dll

    # #  In order to comply with Aseprite's EULA, please make sure the repository is private before enabling this feature!
    # - name: Uploading build artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: aseprite 
    #     path: |
    #       REPO_NAME=${{ steps.get-content.outputs.repo-name }}

    #       D:/a/$REPO_NAME/$REPO_NAME/build/bin/data
    #       D:/a/$REPO_NAME/$REPO_NAME/build/bin/aseprite.exe
    #       D:/a/$REPO_NAME/$REPO_NAME/build/bin/libcrypto-1_1-x64.dll

    - name: zip build artifacts
      shell: bash
      run: |
        GITHUB_REPOSITORY="${{ github.repository }}"
        REPO_NAME="${GITHUB_REPOSITORY#${{ github.repository_owner }}/}"

        cd D:/a/$REPO_NAME/$REPO_NAME/build/bin/
        7z a -tzip aseprite.${{ needs.check.outputs.tag }}.zip data aseprite.exe libcrypto-1_1-x64.dll
        cp aseprite.${{ needs.check.outputs.tag }}.zip D:/a/

    - name: Draft Release and upload files
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ needs.check.outputs.tag }}
        name: Aseprite ${{ needs.check.outputs.tag }}
        body: ${{ steps.get-content.outputs.body-content }}
        draft: true # To comply with Aseprite's EULA, make sure the repository is private before canceling the draft.
        prerelease: false
        files: |
          D:/a/aseprite.${{ needs.check.outputs.tag }}.zip
